{"key":"swift-automation-macos-demo","value":{"name":"swift-automation-macos-demo","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Swift Automation for macOS: Notes & Reminders</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js\"></script>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            color: #333;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .header {\n            text-align: center;\n            margin-bottom: 40px;\n            color: white;\n        }\n        \n        .header h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n        \n        .header p {\n            font-size: 1.2rem;\n            opacity: 0.9;\n        }\n        \n        .card {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 16px;\n            padding: 30px;\n            margin-bottom: 30px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n            backdrop-filter: blur(10px);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        \n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(0,0,0,0.15);\n        }\n        \n        .card h2 {\n            color: #4a5568;\n            margin-bottom: 20px;\n            font-size: 1.8rem;\n            border-bottom: 3px solid #667eea;\n            padding-bottom: 10px;\n        }\n        \n        .card h3 {\n            color: #2d3748;\n            margin: 20px 0 15px 0;\n            font-size: 1.3rem;\n        }\n        \n        .comparison {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .comparison-item {\n            padding: 20px;\n            border-radius: 12px;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .notes-section {\n            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);\n        }\n        \n        .reminders-section {\n            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n        }\n        \n        .status-badge {\n            display: inline-block;\n            padding: 6px 12px;\n            border-radius: 20px;\n            font-size: 0.8rem;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n        \n        .no-api {\n            background: #fed7d7;\n            color: #c53030;\n        }\n        \n        .full-api {\n            background: #c6f6d5;\n            color: #22543d;\n        }\n        \n        .code-block {\n            margin: 20px 0;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n        \n        pre {\n            margin: 0 !important;\n            padding: 20px !important;\n            background: #2d3748 !important;\n            color: #e2e8f0 !important;\n            overflow-x: auto;\n        }\n        \n        .approach-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .approach-card {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            padding: 20px;\n            border-radius: 12px;\n            text-align: center;\n        }\n        \n        .approach-card h4 {\n            margin-bottom: 15px;\n            font-size: 1.2rem;\n        }\n        \n        .pros-cons {\n            text-align: left;\n            margin-top: 15px;\n        }\n        \n        .pros-cons ul {\n            list-style: none;\n            padding: 0;\n        }\n        \n        .pros-cons li {\n            margin: 5px 0;\n            padding-left: 20px;\n            position: relative;\n        }\n        \n        .pros-cons .pro::before {\n            content: \"‚úÖ\";\n            position: absolute;\n            left: 0;\n        }\n        \n        .pros-cons .con::before {\n            content: \"‚ùå\";\n            position: absolute;\n            left: 0;\n        }\n        \n        .interactive-demo {\n            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);\n            padding: 20px;\n            border-radius: 12px;\n            margin: 20px 0;\n        }\n        \n        .demo-controls {\n            display: flex;\n            gap: 15px;\n            margin-bottom: 20px;\n            flex-wrap: wrap;\n        }\n        \n        button {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: all 0.3s ease;\n        }\n        \n        button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        \n        button:active {\n            transform: translateY(0);\n        }\n        \n        .demo-output {\n            background: #2d3748;\n            color: #e2e8f0;\n            padding: 20px;\n            border-radius: 8px;\n            font-family: 'Monaco', 'Menlo', monospace;\n            min-height: 100px;\n            white-space: pre-wrap;\n        }\n        \n        .feature-highlight {\n            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n            padding: 3px;\n            border-radius: 12px;\n            margin: 20px 0;\n        }\n        \n        .feature-content {\n            background: white;\n            padding: 20px;\n            border-radius: 9px;\n        }\n        \n        @media (max-width: 768px) {\n            .comparison {\n                grid-template-columns: 1fr;\n            }\n            \n            .header h1 {\n                font-size: 2rem;\n            }\n            \n            .demo-controls {\n                flex-direction: column;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>üçé Swift Automation for macOS</h1>\n            <p>Accessing Apple Notes & Reminders Data in 2025</p>\n        </div>\n        \n        <div class=\"card\">\n            <h2>üéØ The Great Divide: Notes vs Reminders</h2>\n            <div class=\"comparison\">\n                <div class=\"comparison-item notes-section\">\n                    <div class=\"status-badge no-api\">NO OFFICIAL API</div>\n                    <h3>üìù Apple Notes</h3>\n                    <ul>\n                        <li>‚Ä¢ AppleScript/JXA only</li>\n                        <li>‚Ä¢ SQLite database access</li>\n                        <li>‚Ä¢ Protobuf data format</li>\n                        <li>‚Ä¢ Creative workarounds needed</li>\n                    </ul>\n                </div>\n                <div class=\"comparison-item reminders-section\">\n                    <div class=\"status-badge full-api\">FULL EVENTKIT SUPPORT</div>\n                    <h3>‚è∞ Apple Reminders</h3>\n                    <ul>\n                        <li>‚Ä¢ Complete EventKit framework</li>\n                        <li>‚Ä¢ Native Swift APIs</li>\n                        <li>‚Ä¢ Rich data model</li>\n                        <li>‚Ä¢ First-class support</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>üîß Implementation Approaches</h2>\n            <div class=\"approach-grid\">\n                <div class=\"approach-card\">\n                    <h4>AppleScript Bridge</h4>\n                    <div class=\"pros-cons\">\n                        <ul>\n                            <li class=\"pro\">Universal app control</li>\n                            <li class=\"pro\">Works with Notes</li>\n                            <li class=\"con\">Performance limitations</li>\n                            <li class=\"con\">Uncertain future</li>\n                        </ul>\n                    </div>\n                </div>\n                <div class=\"approach-card\">\n                    <h4>EventKit (Swift)</h4>\n                    <div class=\"pros-cons\">\n                        <ul>\n                            <li class=\"pro\">Optimal performance</li>\n                            <li class=\"pro\">Type safety</li>\n                            <li class=\"con\">Reminders only</li>\n                            <li class=\"con\">Limited scope</li>\n                        </ul>\n                    </div>\n                </div>\n                <div class=\"approach-card\">\n                    <h4>App Intents</h4>\n                    <div class=\"pros-cons\">\n                        <ul>\n                            <li class=\"pro\">Future-proof</li>\n                            <li class=\"pro\">AI integration</li>\n                            <li class=\"con\">Action-based only</li>\n                            <li class=\"con\">macOS 13+ required</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>üì± Apple Notes Access (AppleScript)</h2>\n            <p>Since Apple provides no official API for Notes, we must use AppleScript automation:</p>\n            \n            <div class=\"code-block\">\n                <pre><code class=\"language-swift\">import Foundation\n\nfunc getNoteContent(title: String, folder: String = \"Notes\") -> String? {\n    let script = NSAppleScript(source: \"\"\"\n        tell application \"Notes\"\n            try\n                return body of note \"\\(title)\" of folder \"\\(folder)\"\n            on error errMsg\n                return \"Error: \" & errMsg\n            end try\n        end tell\n    \"\"\")\n    \n    var error: NSDictionary?\n    let result = script?.executeAndReturnError(&error)\n    \n    if let error = error {\n        print(\"AppleScript Error: \\(error)\")\n        return nil\n    }\n    \n    return result?.stringValue\n}\n\n// Alternative: JavaScript for Automation (JXA)\nfunc getNotesWithJXA(searchTerm: String) -> [String] {\n    let script = NSAppleScript(source: \"\"\"\n        const Notes = Application('Notes')\n        const notes = Notes.notes.whose({\n            _or: [\n                {name: {_contains: '\\(searchTerm)'}},\n                {plaintext: {_contains: '\\(searchTerm)'}}\n            ]\n        })()\n        \n        return notes.map(note => ({\n            name: note.name(),\n            content: note.plaintext().slice(0, 200)\n        }))\n    \"\"\")\n    \n    // Process results...\n    return []\n}</code></pre>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>‚è∞ Apple Reminders Access (EventKit)</h2>\n            <p>Reminders has full EventKit support with rich APIs:</p>\n            \n            <div class=\"code-block\">\n                <pre><code class=\"language-swift\">import EventKit\nimport CoreLocation\n\nclass ReminderManager {\n    private let eventStore = EKEventStore()\n    \n    // Request permission (iOS 17+/macOS 14+)\n    func requestAccess() async throws {\n        if #available(macOS 14.0, *) {\n            try await eventStore.requestWriteOnlyAccessToReminders()\n        } else {\n            try await eventStore.requestAccess(to: .reminder)\n        }\n    }\n    \n    // Create a simple reminder\n    func createReminder(title: String, notes: String? = nil, dueDate: Date? = nil) async throws {\n        guard let calendar = eventStore.defaultCalendarForNewReminders() else {\n            throw ReminderError.noDefaultCalendar\n        }\n        \n        let reminder = EKReminder(eventStore: eventStore)\n        reminder.title = title\n        reminder.notes = notes\n        reminder.calendar = calendar\n        \n        if let dueDate = dueDate {\n            reminder.dueDateComponents = Calendar.current.dateComponents(\n                [.year, .month, .day, .hour, .minute], \n                from: dueDate\n            )\n        }\n        \n        try eventStore.save(reminder, commit: true)\n    }\n    \n    // Create location-based reminder\n    func createLocationReminder(title: String, location: CLLocation, address: String) throws {\n        let reminder = EKReminder(eventStore: eventStore)\n        reminder.title = title\n        reminder.calendar = eventStore.defaultCalendarForNewReminders()\n        \n        let structuredLocation = EKStructuredLocation(title: address)\n        structuredLocation.geoLocation = location\n        \n        let alarm = EKAlarm()\n        alarm.structuredLocation = structuredLocation\n        alarm.proximity = .enter\n        \n        reminder.addAlarm(alarm)\n        try eventStore.save(reminder, commit: true)\n    }\n    \n    // Fetch reminders\n    func fetchReminders(from startDate: Date, to endDate: Date) async -> [EKReminder] {\n        let calendars = eventStore.calendars(for: .reminder)\n        let predicate = eventStore.predicateForReminders(in: calendars)\n        \n        return await withCheckedContinuation { continuation in\n            eventStore.fetchReminders(matching: predicate) { reminders in\n                continuation.resume(returning: reminders ?? [])\n            }\n        }\n    }\n}</code></pre>\n            </div>\n        </div>\n\n        <div class=\"feature-highlight\">\n            <div class=\"feature-content\">\n                <h2>üöÄ 2025 Innovation: Foundation Models Framework</h2>\n                <p>Apple's new on-device AI framework revolutionizes automation:</p>\n                \n                <div class=\"code-block\">\n                    <pre><code class=\"language-swift\">import FoundationModels\n\n@Generable\nstruct TaskExtraction {\n    let title: String\n    let dueDate: Date?\n    let priority: Priority\n    let category: String\n}\n\nclass IntelligentAutomation {\n    private let languageModel = LanguageModelSession()\n    \n    func extractTasksFromNotes(noteContent: String) async throws -> [TaskExtraction] {\n        let tasks = try await languageModel.respond(\n            generating: [TaskExtraction].self,\n            to: \"\"\"\n            Extract actionable tasks from this note content:\n            \\(noteContent)\n            \n            Look for due dates, priorities, and categorize by context.\n            \"\"\"\n        )\n        \n        return tasks\n    }\n    \n    func generateReminderSummary(reminders: [EKReminder]) async throws -> String {\n        let reminderText = reminders.map { \"\\($0.title ?? \"Untitled\")\" }.joined(separator: \"\\n\")\n        \n        return try await languageModel.respond(\n            to: \"\"\"\n            Create a natural language summary of these reminders:\n            \\(reminderText)\n            \n            Group by priority and provide insights about workload.\n            \"\"\"\n        )\n    }\n}</code></pre>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>üéÆ Interactive Demo</h2>\n            <div class=\"interactive-demo\">\n                <div class=\"demo-controls\">\n                    <button onclick=\"simulateNotesAccess()\">üìù Simulate Notes Access</button>\n                    <button onclick=\"simulateRemindersCreation()\">‚è∞ Create Sample Reminder</button>\n                    <button onclick=\"simulateAIExtraction()\">ü§ñ AI Task Extraction</button>\n                    <button onclick=\"showPermissions()\">üîê Show Permissions</button>\n                </div>\n                <div class=\"demo-output\" id=\"demoOutput\">\nClick a button above to see automation examples in action...\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>üîí Security & Permissions</h2>\n            <h3>Required Entitlements</h3>\n            <div class=\"code-block\">\n                <pre><code class=\"language-xml\">&lt;!-- Info.plist entries --&gt;\n&lt;key&gt;NSAppleEventsUsageDescription&lt;/key&gt;\n&lt;string&gt;This app needs to access Notes for automation&lt;/string&gt;\n\n&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;\n&lt;string&gt;This app manages your reminders&lt;/string&gt;\n\n&lt;!-- Entitlements.plist --&gt;\n&lt;key&gt;com.apple.security.automation.apple-events&lt;/key&gt;\n&lt;true/&gt;\n\n&lt;key&gt;com.apple.security.personal-information.calendars&lt;/key&gt;\n&lt;true/&gt;</code></pre>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        function simulateNotesAccess() {\n            const output = document.getElementById('demoOutput');\n            output.textContent = `üîÑ Executing AppleScript to access Notes...\n\ntell application \"Notes\"\n    set notesList to every note of folder \"Work\"\n    repeat with currentNote in notesList\n        if name of currentNote contains \"Meeting\" then\n            return body of currentNote\n        end if\n    end repeat\nend tell\n\n‚úÖ Found note: \"Team Meeting Notes\"\nüìÑ Content: \"Discuss Q4 roadmap, review sprint goals...\"\n\n‚ö†Ô∏è  Note: This requires user permission and Notes.app to be installed.`;\n        }\n\n        function simulateRemindersCreation() {\n            const output = document.getElementById('demoOutput');\n            output.textContent = `üîÑ Creating reminder using EventKit...\n\nlet eventStore = EKEventStore()\nlet reminder = EKReminder(eventStore: eventStore)\n\nreminder.title = \"Review Swift automation code\"\nreminder.notes = \"Check the latest EventKit APIs\"\nreminder.calendar = eventStore.defaultCalendarForNewReminders()\n\n// Set due date to tomorrow at 2 PM\nlet dueDate = Calendar.current.date(byAdding: .day, value: 1, to: Date())!\nreminder.dueDateComponents = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute], from: dueDate)\n\ntry eventStore.save(reminder, commit: true)\n\n‚úÖ Reminder created successfully!\nüìÖ Due: Tomorrow at 2:00 PM\nüè∑Ô∏è  Category: Default List`;\n        }\n\n        function simulateAIExtraction() {\n            const output = document.getElementById('demoOutput');\n            output.textContent = `ü§ñ Using Foundation Models framework for AI extraction...\n\nInput text: \"Need to finish the quarterly report by Friday. \nAlso schedule dentist appointment for next week. \nBuy groceries tomorrow - milk, bread, eggs.\"\n\nüîÑ Processing with on-device language model...\n\n@Generable struct TaskExtraction results:\n\nTask 1:\n‚îú‚îÄ Title: \"Finish quarterly report\"\n‚îú‚îÄ Due Date: Friday (2025-06-23)\n‚îú‚îÄ Priority: High\n‚îî‚îÄ Category: Work\n\nTask 2:\n‚îú‚îÄ Title: \"Schedule dentist appointment\"\n‚îú‚îÄ Due Date: Next week\n‚îú‚îÄ Priority: Medium\n‚îî‚îÄ Category: Health\n\nTask 3:\n‚îú‚îÄ Title: \"Buy groceries\"\n‚îú‚îÄ Due Date: Tomorrow\n‚îú‚îÄ Priority: Low\n‚îî‚îÄ Category: Shopping\n‚îî‚îÄ Items: milk, bread, eggs\n\n‚úÖ Extracted 3 actionable tasks using AI!`;\n        }\n\n        function showPermissions() {\n            const output = document.getElementById('demoOutput');\n            output.textContent = `üîê macOS Automation Permission Requirements:\n\n1. üìù Apple Notes Access:\n   ‚îú‚îÄ Permission: Apple Events (AppleScript)\n   ‚îú‚îÄ Prompt: \"App would like to control Notes.app\"\n   ‚îú‚îÄ Entitlement: com.apple.security.automation.apple-events\n   ‚îî‚îÄ Fallback: Manual export/import\n\n2. ‚è∞ Apple Reminders Access:\n   ‚îú‚îÄ Permission: Calendars & Reminders\n   ‚îú‚îÄ Prompt: \"App would like to access your reminders\"\n   ‚îú‚îÄ Framework: EventKit\n   ‚îî‚îÄ Entitlement: com.apple.security.personal-information.calendars\n\n3. üîí Security Requirements (2025):\n   ‚îú‚îÄ Hardened Runtime: Required for notarization\n   ‚îú‚îÄ App Sandbox: Required for Mac App Store\n   ‚îú‚îÄ Code Signing: Required for Gatekeeper\n   ‚îî‚îÄ Privacy Descriptions: Required in Info.plist\n\n4. üöÄ New in 2025:\n   ‚îú‚îÄ Foundation Models: On-device AI processing\n   ‚îú‚îÄ Enhanced App Intents: Better Spotlight integration\n   ‚îî‚îÄ Stricter TCC: More granular permissions\n\n‚ö†Ô∏è  Always request minimal necessary permissions and provide clear explanations to users.`;\n        }\n\n        // Add some interactive flair\n        document.addEventListener('DOMContentLoaded', function() {\n            const cards = document.querySelectorAll('.card');\n            cards.forEach((card, index) => {\n                card.style.animationDelay = `${index * 0.1}s`;\n                card.style.animation = 'fadeInUp 0.6s ease forwards';\n            });\n        });\n\n        // Add CSS animation\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes fadeInUp {\n                from {\n                    opacity: 0;\n                    transform: translateY(30px);\n                }\n                to {\n                    opacity: 1;\n                    transform: translateY(0);\n                }\n            }\n            \n            .card {\n                opacity: 0;\n            }\n        `;\n        document.head.appendChild(style);\n    </script>\n</body>\n</html>","contentType":"text/html","size":21331,"timestamp":1750384194717}}